name: Build and Deploy Jekyll site (with PDF)

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  PDF_NAME: thiru-resume-v${{ github.run_number }}.pdf

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # ðŸ§© Step 1: Checkout
      - name: Checkout repository
        uses: actions/checkout@v4

      # ðŸ§© Step 2: Setup Ruby
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.1"

      # ðŸ§© Step 3: Cache Ruby gems
      - name: Cache Ruby gems
        uses: actions/cache@v4
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      # ðŸ§© Step 4: Install dependencies
      - name: Install dependencies with Bundler
        run: |
          gem install bundler
          bundle config set --local path 'vendor/bundle'
          bundle install --jobs 4 --retry 3

      # ðŸ§© Step 5: Cache Jekyll build output (optional but saves time)
      - name: Cache Jekyll build
        uses: actions/cache@v4
        with:
          path: _site
          key: ${{ runner.os }}-jekyll-${{ hashFiles('**/*.{html,md,yml,scss,js}') }}
          restore-keys: |
            ${{ runner.os }}-jekyll-

      # ðŸ§© Step 6: Build Jekyll site
      - name: Build site (Jekyll)
        run: bundle exec jekyll build --trace

      # ðŸ§© Step 7: Generate PDF (via Dockerized wkhtmltopdf)
      - name: Generate PDF from index.html
        run: |
          docker run --rm -v ${{ github.workspace }}:/data \
            madnight/docker-alpine-wkhtmltopdf \
            wkhtmltopdf --encoding utf-8 --enable-local-file-access \
            --load-error-handling ignore \
            --disable-smart-shrinking \
            --no-stop-slow-scripts \
            file:///data/_site/index.html /data/"${{ env.PDF_NAME }}"


      # ðŸ§© Step 8: Move PDF to docs/ (ensures it's deployed to GitHub Pages)
      - name: Move PDF to docs/
        run: |
          FILE=${{ env.PDF_NAME }}
          mkdir -p docs
          # Optional: clean up any older PDF files
          find docs -maxdepth 1 -type f -name "thiru-resume-v*.pdf" -delete || true
          mv "$FILE" docs/

      # ðŸ§© Step 9: Upload PDF as artifact (optional)
      - name: Upload PDF as artifact
        uses: actions/upload-artifact@v4
        with:
          name: resume-pdf
          path: docs/${{ env.PDF_NAME }}

      # ðŸ§© Step 10: Upload Jekyll site for deployment
      - name: Upload artifact for GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site/

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
